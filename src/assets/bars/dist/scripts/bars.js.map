{"version":3,"file":"bars/dist/scripts/bars.js","mappings":"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","sources":["webpack://craft-batch-actions/./src/assets/bars/src/scripts/BatchActionBar.ts","webpack://craft-batch-actions/webpack/bootstrap","webpack://craft-batch-actions/webpack/runtime/make namespace object","webpack://craft-batch-actions/./src/assets/bars/src/scripts/main.ts"],"sourcesContent":["import { InputBlock, MatrixInputBlock, NeoInputBlock, VariantInputBlock } from './types/InputBlock'\nimport { InputField, MatrixInputField, NeoInputField, VariantInputField, InputBlockSelect } from './types/InputField'\n\n/**\n * Settings for a `BatchActionBar`.\n */\ninterface BatchActionBarSettings {\n  addBlockEvent: string\n  selector: InputBlockSelect\n}\n\n/**\n * The event triggered when a new block is added to a block element field.\n */\ninterface AddBlockEvent {\n  $entry?: JQuery\n  block: NeoInputBlock\n}\n\n/**\n * The mobile menu button for a `BatchActionBar`.\n */\ninterface MenuButton extends JQuery {\n  menubtn: () => void\n}\n\n/**\n * The data used when refreshing the `BatchActionBar` buttons.\n */\ninterface ButtonRefreshData {\n  icon: string\n  condition: Function\n  enable: boolean\n  initialState: boolean\n}\n\ninterface SmithMenu {\n  $pasteBtn: JQuery\n  checkPaste: () => void\n  copyBlock: (e?: object) => void\n  pasteBlock: (e?: object, data?: object) => void\n}\n\n/**\n * Represents a batch action.\n */\ninterface BatchAction {\n  label: string\n  icon: string\n  condition: (data: any) => boolean\n  initialState: boolean\n}\n\nconst createAction: (\n  label: string,\n  icon: string,\n  condition: (data: any) => boolean,\n  initialState?: boolean\n) => BatchAction = (label, icon, condition, initialState = false) => {\n  return {\n    label,\n    icon,\n    condition,\n    initialState\n  }\n}\n\n/**\n * A bar added to block element input fields for selecting all blocks and performing batch actions.\n */\nabstract class BatchActionBar {\n  /**\n   * The container for the select/buttons/menu components.\n   * @public\n   */\n  public $bar: JQuery\n\n  /**\n   * The container for the select all checkbox.\n   * @public\n   */\n  public $selectContainer: JQuery\n\n  /**\n   * The select all checkbox.\n   * @public\n   */\n  public $select: JQuery\n\n  /**\n   * The container for the action buttons.\n   * @public\n   */\n  public $buttonsContainer: JQuery\n\n  /**\n   * The container for the mobile menu.\n   * @public\n   */\n  public $menuContainer: JQuery\n\n  /**\n   * The mobile menu.\n   * @public\n   */\n  public $menu: JQuery\n\n  /**\n   * The action buttons.\n   * @private\n   */\n  private _$buttons: Record<string, JQuery> = {}\n\n  /**\n   * The constructor.\n   * @param input - The block element `InputField`.\n   * @param settings - A `BatchActionBarSettings` object.\n   * @public\n   */\n  constructor (\n    public readonly input: InputField,\n    public readonly settings: BatchActionBarSettings\n  ) {\n    this.$bar = $('<div class=\"batch-action-bar\"/>').prependTo(input.$container)\n    this._initSelect()\n    this._initButtons()\n    this._initMenu()\n\n    const $actions = this.$bar.add(this.$menu)\n\n    // Register event handlers for each action button\n    this.actions().forEach((action) => {\n      const lowerCaseLabel = action.label.toLowerCase()\n      this._$buttons[lowerCaseLabel] = $actions.find(`[data-bba-bn=\"button.${lowerCaseLabel}\"]`)\n      this._$buttons[lowerCaseLabel].on('activate', (e: JQuery.Event) => {\n        e.preventDefault()\n        const actionMethod = this[lowerCaseLabel as keyof BatchActionBar]\n\n        if (typeof actionMethod === 'function') {\n          actionMethod.bind(this)()\n          this.refreshButtons()\n        }\n      })\n    })\n\n    this.refreshButtons()\n    this.registerEventListeners()\n  }\n\n  /**\n   * Gets the supported batch actions for the block element input field.\n   * @returns an array of `BatchAction`s.\n   * @protected\n   * @since 1.2.0\n   */\n  protected actions (): BatchAction[] {\n    const actions = [\n      createAction('Expand', 'expand', this.isBlockCollapsed.bind(this)),\n      createAction('Collapse', 'collapse', this.isBlockExpanded.bind(this)),\n      createAction('Enable', 'enabled', this.isBlockDisabled.bind(this)),\n      createAction('Disable', 'disabled', this.isBlockEnabled.bind(this)),\n      createAction('Delete', 'remove', (_?: any) => this.getSelectedBlocks().length > 0)\n    ]\n\n    return actions\n  }\n\n  /**\n   * Checks whether a block is expanded.\n   * @param $block - A `JQuery` object representing an input block\n   * @returns whether `$block` is expanded.\n   * @protected\n   */\n  protected abstract isBlockExpanded ($block?: JQuery): boolean\n\n  /**\n   * Checks whether a block is collapsed.\n   * @param $block - A `JQuery` object representing an input block\n   * @returns whether `$block` is collapsed.\n   * @protected\n   */\n  protected isBlockCollapsed ($block?: JQuery): boolean {\n    return typeof $block !== 'undefined' ? !this.isBlockExpanded($block) : false\n  }\n\n  /**\n   * Checks whether a block is enabled.\n   * @param $block - A `JQuery` object representing an input block\n   * @returns whether `$block` is enabled.\n   * @protected\n   */\n  protected abstract isBlockEnabled ($block?: JQuery): boolean\n\n  /**\n   * Checks whether a block is disabled.\n   * @param $block - A `JQuery` object representing an input block\n   * @returns whether `$block` is disabled.\n   * @protected\n   */\n  protected isBlockDisabled ($block?: JQuery): boolean {\n    return typeof $block !== 'undefined' ? !this.isBlockEnabled($block) : false\n  }\n\n  /**\n   * Initialises the select all checkbox.\n   * @private\n   */\n  private _initSelect (): void {\n    this.$selectContainer = $('<div/>', {\n      class: 'batch-action-bar_select',\n      role: 'checkbox',\n      tabindex: 0,\n      'aria-label': Craft.t('batch-actions', 'Select all'),\n      'aria-checked': 'false'\n    }).appendTo(this.$bar)\n    this.$select = $('<div class=\"checkbox\">').appendTo(this.$selectContainer)\n    let handlingCheckbox = false\n    let initialised = false\n\n    const selectHandler: (e: JQuery.Event) => void = (e) => {\n      if (!initialised) {\n        // The add block event is only initialised on the first check of the select checkbox, since\n        // if it isn't checked then any new block doesn't need to be checked\n        this.input.on(this.settings.addBlockEvent, (e: AddBlockEvent) => {\n          const $block = e.$entry ?? e.block?.$container ?? this.getNewestBlock()?.$container\n\n          if (this.$select.hasClass('checked')) {\n            handlingCheckbox = true\n            $block.addClass(this.settings.selector.settings.selectedClass)\n            this.settings.selector.selectItem($block, false, true)\n            this.refreshButtons()\n          }\n        })\n        initialised = true\n      }\n\n      handlingCheckbox = true\n      this.$select.toggleClass('checked').removeClass('indeterminate')\n      const selectAll = this.$select.hasClass('checked')\n\n      if (selectAll) {\n        this.settings.selector.selectAll()\n        this.$selectContainer.attr('aria-checked', 'true')\n      } else {\n        this.settings.selector.deselectAll()\n        this.$selectContainer.attr('aria-checked', 'false')\n      }\n    }\n\n    this.$selectContainer.on('mousedown', (e) => {\n      if (e.which === Garnish.PRIMARY_CLICK) {\n        selectHandler(e)\n      }\n    })\n    this.$selectContainer.on('keydown', (e) => {\n      if (e.keyCode === Garnish.SPACE_KEY) {\n        e.preventDefault()\n        selectHandler(e)\n      }\n    })\n\n    this.settings.selector.on('selectionChange', (_: Event) => {\n      if (!handlingCheckbox) {\n        // Any manual change to block selection invalidates the select all state\n        this.$select.removeClass('checked')\n\n        const anyBlocksChecked = this.settings.selector.$selectedItems.length > 0\n        this.$select.toggleClass('indeterminate', anyBlocksChecked)\n        this.$selectContainer.attr('aria-checked', anyBlocksChecked ? 'mixed' : 'false')\n      } else {\n        // Set our checkbox handling as being complete\n        handlingCheckbox = false\n      }\n\n      this.refreshButtons()\n    })\n  }\n\n  /**\n   * Refreshes the enabled/disabled state of the action buttons, based on the selected block(s).\n   * @protected\n   */\n  protected refreshButtons (): void {\n    const actions: Record<string, ButtonRefreshData> = {}\n    const labels: string[] = []\n\n    this.actions().forEach((action) => {\n      labels.push(action.label)\n      actions[action.label] = {\n        icon: action.icon,\n        condition: action.condition,\n        enable: action.initialState,\n        initialState: action.initialState\n      }\n    })\n\n    const checkConditions: (data?: any) => void = (data?: any) => {\n      labels.forEach((label) => {\n        if (actions[label].initialState) {\n          actions[label].enable &&= actions[label].condition(data)\n        } else {\n          actions[label].enable ||= actions[label].condition(data)\n        }\n      })\n    }\n\n    checkConditions()\n    this.settings.selector.$selectedItems.each((_: number, block: HTMLElement) => {\n      checkConditions($(block))\n    })\n\n    labels.forEach((label) => {\n      this._$buttons[label.toLowerCase()].toggleClass('disabled', !actions[label].enable)\n    })\n  }\n\n  /**\n   * Registers listeners for events where `BatchActionBar` actions should be executed.\n   * @protected\n   */\n  protected registerEventListeners (): void {}\n\n  /**\n   * Initialises the action buttons.\n   * @private\n   */\n  private _initButtons (): void {\n    this.$buttonsContainer = $('<div class=\"batch-action-bar_buttons btngroup\"/>').appendTo(this.$bar)\n    this.actions().forEach((action) => {\n      this._generateAction(action.label, action.icon, 'btn').appendTo(this.$buttonsContainer)\n    })\n  }\n\n  /**\n   * Initialises the mobile menu.\n   * @private\n   */\n  private _initMenu (): void {\n    this.$menuContainer = $('<div class=\"batch-action-bar_menu hidden\"/>').appendTo(this.$bar)\n    const $button = $('<button type=\"button\" class=\"btn settings icon menubtn\">Actions</button>')\n      .appendTo(this.$menuContainer) as MenuButton\n    this.$menu = $('<div class=\"menu\"/>')\n      .appendTo(this.$menuContainer)\n    const $ul = $('<ul class=\"padded\"/>')\n      .appendTo(this.$menu)\n\n    this.actions().forEach((action) => {\n      $('<li/>').append(this._generateAction(action.label, action.icon)).appendTo($ul)\n    })\n\n    $button.menubtn()\n    const selectWidth = (this.$selectContainer.outerWidth() as number) + 2\n    let buttonsWidth = this.$buttonsContainer.width() as number\n    const updateResponsiveness: () => void = () => {\n      buttonsWidth ||= this.$buttonsContainer.width() as number\n      const isMobile = (this.$bar.width() as number) - selectWidth < buttonsWidth\n      this.$buttonsContainer.toggleClass('hidden', isMobile)\n      this.$menuContainer.toggleClass('hidden', !isMobile)\n    }\n    updateResponsiveness()\n    this.$bar.on('resize', updateResponsiveness)\n  }\n\n  /**\n   * Generates an action button.\n   * @param label - the label to use on the button\n   * @param icon - the name of the icon to show on the button\n   * @param buttonClasses - the classes to use on the button element\n   * @returns a `JQuery` object representing the button\n   * @private\n   */\n  private _generateAction (label: string, icon: string|null, buttonClasses?: string): JQuery {\n    const isButton = typeof buttonClasses !== 'undefined'\n    const lowerCaseLabel = label.toLowerCase()\n    icon ??= lowerCaseLabel\n    const $action = $(`<${isButton ? 'button' : 'a'}/>`)\n      .attr({\n        'aria-label': label,\n        'data-bba-bn': `button.${lowerCaseLabel}`,\n        'data-icon': icon\n      })\n      .text(Craft.t('batch-actions', label))\n\n    if (isButton) {\n      $action.addClass(buttonClasses)\n    }\n\n    return $action\n  }\n\n  /**\n   * @returns the selected `InputBlock`s on the block element field\n   * @protected\n   */\n  protected abstract getSelectedBlocks (): InputBlock[]\n\n  /**\n   * @returns the newest unsaved `InputBlock` on the block element field\n   * @protected\n   * @since 1.3.0\n   */\n  protected getNewestBlock (): InputBlock|null {\n    return null\n  }\n\n  /**\n   * Expands the selected blocks.\n   * @public\n   */\n  public expand (): void {\n    this.getSelectedBlocks().forEach((block) => block.expand())\n  }\n\n  /**\n   * Collapses the selected blocks.\n   * @protected\n   */\n  protected collapse (): void {\n    this.getSelectedBlocks().forEach((block) => block.collapse())\n  }\n\n  /**\n   * Enables the selected blocks.\n   * @protected\n   */\n  protected abstract enable (): void\n\n  /**\n   * Disables the selected blocks.\n   * @protected\n   */\n  protected abstract disable (): void\n\n  /**\n   * Deletes the selected blocks.\n   * @protected\n   */\n  protected abstract delete (): void\n}\n\n/**\n * A bar added to Matrix input fields for selecting all blocks and performing batch actions.\n */\nclass MatrixBatchActionBar extends BatchActionBar {\n  /**\n   * The Smith menu, if Smith is installed.\n   * @see https://plugins.craftcms.com/smith\n   * @private\n   */\n  private _smithMenu: SmithMenu|null = null\n\n  /**\n   * Dummy block so our Smith menu pastes blocks at the top\n   * @private\n   */\n  private _$dummyBlock: JQuery|null = null\n\n  /**\n   * The constructor.\n   * @param input - The `MatrixInputField`.\n   * @public\n   */\n  constructor (public readonly input: MatrixInputField) {\n    super(input, {\n      addBlockEvent: 'entryAdded',\n      selector: input.entrySelect\n    })\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected actions (): BatchAction[] {\n    if (typeof Craft.Smith === 'undefined') {\n      // Not using Smith, can't support copying/pasting\n      return super.actions()\n    } else if (this._smithMenu === null || typeof this._smithMenu === 'undefined') {\n      this._$dummyBlock = $('<div/>', {\n        class: 'hidden',\n        data: {\n          block: {\n            $actionMenu: $()\n          }\n        }\n      }).prependTo(this.input.$blockContainer)\n      this._smithMenu = new Craft.Smith.Menu(\n        this.input.$container,\n        this._$dummyBlock,\n        $() // Supposed to be all Matrix blocks for the field, but doesn't appear to actually be used by Smith\n      )\n    }\n\n    return super.actions().concat([\n      createAction('Copy', 'field', (_?: any) => this.getSelectedBlocks().length > 0),\n      createAction('Paste', 'brush', (_?: any) => {\n        this._smithMenu?.checkPaste()\n        return !(this._smithMenu?.$pasteBtn.hasClass('disabled') ?? true)\n      }, true)\n    ])\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected registerEventListeners (): void {\n    const settingsMenuListener: (block: MatrixInputBlock) => void = (block) => {\n      block.actionDisclosure.on('hide', () => this.refreshButtons())\n    }\n    this.input.entrySelect.$items.each((_, block: HTMLElement) => settingsMenuListener($(block).data('entry')))\n    this.input.on(this.settings.addBlockEvent, (e: AddBlockEvent) => {\n      // Craft triggers the `entryAdded` event after attaching the HTML element to the DOM, but\n      // before actually creating the `Entry` instance\n      setTimeout(() => settingsMenuListener(e.$entry?.data('entry')), 250)\n    })\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected isBlockExpanded ($block?: JQuery): boolean {\n    return typeof $block !== 'undefined' ? !$block.hasClass('collapsed') : false\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected isBlockEnabled ($block?: JQuery): boolean {\n    return typeof $block !== 'undefined' ? !$block.hasClass('disabled-entry') : false\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected getSelectedBlocks (): MatrixInputBlock[] {\n    return this.input.entrySelect.$selectedItems\n      .map((_, blockEl) => $(blockEl).data('entry'))\n      .get()\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected enable (): void {\n    this.getSelectedBlocks().forEach((block) => block.enable())\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected disable (): void {\n    this.getSelectedBlocks().forEach((block) => block.disable())\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected delete (): void {\n    if (window.confirm(Craft.t('batch-actions', 'Are you sure you want to delete the selected entries?'))) {\n      this.getSelectedBlocks().forEach((block) => block.selfDestruct())\n    }\n  }\n\n  protected copy (): void {\n    this._ensureSmithInstalled('copy')\n    const selectedBlocks = this.getSelectedBlocks()\n\n    if (selectedBlocks.length > 0) {\n      this._smithMenu?.copyBlock()\n    }\n  }\n\n  protected paste (): void {\n    this._ensureSmithInstalled('paste')\n    this._smithMenu?.pasteBlock()\n  }\n\n  private _ensureSmithInstalled (action: string): void {\n    if (typeof Craft.Smith === 'undefined') {\n      throw new Error(`Tried to ${action} Matrix blocks but Smith isn't installed.`)\n    }\n  }\n}\n\n/**\n * A bar added to Neo input fields for selecting all blocks and performing batch actions.\n */\nclass NeoBatchActionBar extends BatchActionBar {\n  /**\n   * The constructor.\n   * @param input - The `NeoInputField`.\n   * @public\n   */\n  constructor (public readonly input: NeoInputField) {\n    super(input, {\n      addBlockEvent: 'addBlock',\n      selector: input.blockSelect\n    })\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected actions (): BatchAction[] {\n    if (typeof this.input.getCopiedBlocks === 'undefined') {\n      // Not using Neo 3.4.0+, can't support copying/pasting\n      return super.actions()\n    }\n\n    const pasteCondition: (_?: any) => boolean = (_?) => {\n      const copiedBlocks = this.input.getCopiedBlocks()\n\n      if (copiedBlocks.length === 0) {\n        return false\n      }\n\n      // Ensure there are valid blocks to paste at the top level\n      const baseLevel = copiedBlocks[0].level\n      const topLevelBlockTypeIds = this.input.getBlockTypes(true).map((bt) => bt.getId())\n      const validTopLevelBlockCount = copiedBlocks\n        .filter((block) => block.level === baseLevel && topLevelBlockTypeIds.includes(block.type))\n        .length\n      if (validTopLevelBlockCount === 0) {\n        return false\n      }\n\n      // Ensure we won't exceed the field's max top level blocks setting\n      const fieldMaxTopBlocks = this.input.getMaxTopBlocks()\n      if (\n        fieldMaxTopBlocks !== null &&\n        fieldMaxTopBlocks > 0 &&\n        validTopLevelBlockCount + this.input.getBlocks(1).length > fieldMaxTopBlocks\n      ) {\n        return false\n      }\n\n      // Ensure we won't exceed the field's max blocks setting\n      const fieldMaxBlocks = this.input.getMaxBlocks()\n      if (\n        fieldMaxBlocks !== null &&\n        fieldMaxBlocks > 0 &&\n        copiedBlocks.length + this.input.getBlocks().length > fieldMaxBlocks\n      ) {\n        return false\n      }\n\n      // Now we should be fine\n      return true\n    }\n\n    return super.actions().concat([\n      createAction('Copy', 'field', (_?: any) => this.getSelectedBlocks().length > 0),\n      createAction('Paste', 'brush', pasteCondition, true)\n    ])\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected registerEventListeners (): void {\n    const blockEventListener: (block: NeoInputBlock) => void = (block) => {\n      block.on('copyBlock toggleExpansion toggleEnabled', () => this.refreshButtons())\n    }\n    this.input.getBlocks().forEach(blockEventListener)\n    this.input.on(this.settings.addBlockEvent, (e: AddBlockEvent) => {\n      this.refreshButtons()\n      blockEventListener(e.block)\n    })\n    this.input.on('removeBlock', () => this.refreshButtons())\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected isBlockExpanded ($block?: JQuery): boolean {\n    return $block?.hasClass('is-expanded') ?? false\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected isBlockCollapsed ($block?: JQuery): boolean {\n    return typeof $block !== 'undefined' ? !this.isBlockExpanded($block) : false\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected isBlockEnabled ($block?: JQuery): boolean {\n    return $block?.hasClass('is-enabled') ?? false\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected getSelectedBlocks (): NeoInputBlock[] {\n    return this.input.getBlocks().filter((block) => block.isSelected())\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected enable (): void {\n    this.getSelectedBlocks().find((block) => !block.isEnabled())?.enable()\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected disable (): void {\n    this.getSelectedBlocks().find((block) => block.isEnabled())?.disable()\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected delete (): void {\n    if (window.confirm(Craft.t('batch-actions', 'Are you sure you want to delete the selected blocks?'))) {\n      this.getSelectedBlocks().forEach((block) => this.input.removeBlock(block))\n    }\n  }\n\n  protected copy (): void {\n    const selectedBlocks = this.getSelectedBlocks()\n\n    if (selectedBlocks.length > 0) {\n      this.input['@copyBlock']({ block: selectedBlocks[0] })\n    }\n  }\n\n  protected paste (): void {\n    this.input['@pasteBlock']({})\n  }\n}\n\nclass VariantBatchActionBar extends BatchActionBar {\n  /**\n   * The constructor.\n   * @param input - The `MatrixInputField`.\n   * @public\n   */\n  constructor (public readonly input: VariantInputField) {\n    super(input, {\n      addBlockEvent: 'blockAdded',\n      selector: input.variantSelect\n    })\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected registerEventListeners (): void {\n    const blockEventListener: (block: VariantInputBlock) => void = (block) => {\n      const menuObserver = new window.MutationObserver(() => this.refreshButtons())\n      menuObserver.observe(block.$container[0], { childList: true, subtree: true })\n    }\n    this.input.$variantContainer.children()\n      .map((_, variant) => $(variant).data('variant'))\n      .get()\n      .forEach(blockEventListener)\n    this.input.on(this.settings.addBlockEvent, (_: AddBlockEvent) => {\n      this.refreshButtons()\n      const newBlock = this.getNewestBlock()\n\n      if (newBlock !== null) {\n        blockEventListener(newBlock)\n      }\n    })\n    this.input.on('removeBlock', () => this.refreshButtons())\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected isBlockExpanded ($block?: JQuery): boolean {\n    return !($block?.hasClass('collapsed') ?? true)\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected isBlockEnabled ($block?: JQuery): boolean {\n    return !($block?.hasClass('disabled') ?? true)\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected getSelectedBlocks (): VariantInputBlock[] {\n    return this.settings.selector.$selectedItems\n      .map((_, block) => $(block).data('variant'))\n      .get()\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected getNewestBlock (): VariantInputBlock|null {\n    return this.input.$variantContainer.children()\n      .filter(`[data-id=\"new${this.input.totalNewVariants}\"]`)\n      .data('variant')\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected enable (): void {\n    this.input.enableSelectedVariants()\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected disable (): void {\n    this.input.disableSelectedVariants()\n  }\n\n  /**\n   * @inheritDoc\n   */\n  protected delete (): void {\n    if (window.confirm(Craft.t('batch-actions', 'Are you sure you want to delete the selected blocks?'))) {\n      this.input.deleteSelectedVariants()\n    }\n  }\n}\n\nexport {\n  BatchActionBar,\n  MatrixBatchActionBar,\n  NeoBatchActionBar,\n  VariantBatchActionBar\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { BatchActionBar, MatrixBatchActionBar, NeoBatchActionBar, VariantBatchActionBar } from './BatchActionBar'\nimport { MatrixInputField, NeoInputField } from './types/InputField'\nimport '../styles/main.scss'\n\ndeclare global {\n  interface Window {\n    BatchActions: {\n      initBars: (settings: Settings) => void\n      bars: () => BatchActionBar[]\n    }\n  }\n}\n\ninterface Settings {\n  barsDisallowedFields: string[]\n}\n\ninterface MatrixAfterInitEvent {\n  target: MatrixInputField\n}\n\ninterface NeoAfterInitEvent {\n  target: NeoInputField\n}\n\nconst actionBars: BatchActionBar[] = []\nconst initBarFunctions: Function[] = []\nlet barsInitialised = false\nlet barsSettings: Settings = {\n  barsDisallowedFields: []\n}\n\nwindow.BatchActions = {\n  initBars: (settings: Settings) => {\n    barsSettings = settings\n    initBarFunctions.forEach((initFunction) => initFunction())\n    barsInitialised = true\n  },\n\n  bars: () => Array.from(actionBars)\n}\n\n// Only listen for Matrix input initialisation if there are actually any Matrix fields\nif (typeof Craft.MatrixInput !== 'undefined') {\n  Garnish.on(Craft.MatrixInput, 'afterInit', (e: MatrixAfterInitEvent) => {\n    const fieldHandle = e.target.$container.closest('[data-type=craft\\\\\\\\fields\\\\\\\\Matrix]').data('attribute')\n    const initBarFunction: () => void = () => {\n      if (!barsSettings.barsDisallowedFields.includes(fieldHandle)) {\n        actionBars.push(new MatrixBatchActionBar(e.target))\n      }\n    }\n\n    if (barsInitialised) {\n      initBarFunction()\n    } else {\n      initBarFunctions.push(initBarFunction)\n    }\n  })\n}\n\n// Only listen for Neo input initialisation if Neo is installed, and there are any Neo fields\nif (typeof Neo !== 'undefined' && typeof Neo.Input !== 'undefined') {\n  Garnish.on(Neo.Input, 'afterInit', (e: NeoAfterInitEvent) => {\n    // The bar shouldn't be initialised when viewing a revision\n    if (!e.target.$container.hasClass('is-static')) {\n      const fieldHandle = e.target.getName()\n      const initBarFunction: () => void = () => {\n        if (!barsSettings.barsDisallowedFields.includes(fieldHandle)) {\n          actionBars.push(new NeoBatchActionBar(e.target))\n        }\n      }\n\n      if (barsInitialised) {\n        initBarFunction()\n      } else {\n        initBarFunctions.push(initBarFunction)\n      }\n    }\n  })\n}\n\nif (typeof Craft.Commerce !== 'undefined' && typeof Craft.Commerce.VariantMatrix !== 'undefined') {\n  // Incredibly hacky stuff to work around variants' lack of events\n  const VariantMatrix = Craft.Commerce.VariantMatrix\n  const VariantMatrixInit = VariantMatrix.prototype.init\n  const VariantMatrixAddVariant = VariantMatrix.prototype.addVariant\n  const initBarFunction: (variantMatrix: any) => void = (variantMatrix) => {\n    actionBars.push(new VariantBatchActionBar(variantMatrix))\n  }\n\n  VariantMatrix.prototype.init = function () {\n    VariantMatrixInit.apply(this, arguments)\n\n    if (barsInitialised) {\n      initBarFunction(this)\n    } else {\n      initBarFunctions.push(() => initBarFunction(this))\n    }\n  }\n\n  VariantMatrix.prototype.addVariant = function () {\n    VariantMatrixAddVariant.apply(this, arguments)\n    setTimeout(() => this.trigger('blockAdded'), 200)\n  }\n}\n"],"names":["createAction","label","icon","condition","initialState","BatchActionBar","constructor","input","settings","_$buttons","this","$bar","$","prependTo","$container","_initSelect","_initButtons","_initMenu","$actions","add","$menu","actions","forEach","action","lowerCaseLabel","toLowerCase","find","on","e","preventDefault","actionMethod","bind","refreshButtons","registerEventListeners","isBlockCollapsed","isBlockExpanded","isBlockDisabled","isBlockEnabled","_","getSelectedBlocks","length","$block","$selectContainer","class","role","tabindex","Craft","t","appendTo","$select","handlingCheckbox","initialised","selectHandler","addBlockEvent","$entry","block","getNewestBlock","hasClass","addClass","selector","selectedClass","selectItem","toggleClass","removeClass","selectAll","attr","deselectAll","which","Garnish","PRIMARY_CLICK","keyCode","SPACE_KEY","anyBlocksChecked","$selectedItems","labels","push","enable","checkConditions","data","each","$buttonsContainer","_generateAction","$menuContainer","$button","$ul","append","menubtn","selectWidth","outerWidth","buttonsWidth","width","updateResponsiveness","isMobile","buttonClasses","isButton","$action","text","expand","collapse","MatrixBatchActionBar","super","entrySelect","_smithMenu","_$dummyBlock","Smith","$actionMenu","$blockContainer","Menu","concat","checkPaste","$pasteBtn","settingsMenuListener","actionDisclosure","$items","setTimeout","map","blockEl","get","disable","window","confirm","selfDestruct","copy","_ensureSmithInstalled","copyBlock","paste","pasteBlock","Error","NeoBatchActionBar","blockSelect","getCopiedBlocks","copiedBlocks","baseLevel","level","topLevelBlockTypeIds","getBlockTypes","bt","getId","validTopLevelBlockCount","filter","includes","type","fieldMaxTopBlocks","getMaxTopBlocks","getBlocks","fieldMaxBlocks","getMaxBlocks","blockEventListener","isSelected","isEnabled","removeBlock","selectedBlocks","VariantBatchActionBar","variantSelect","MutationObserver","observe","childList","subtree","$variantContainer","children","variant","newBlock","totalNewVariants","enableSelectedVariants","disableSelectedVariants","deleteSelectedVariants","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","r","Symbol","toStringTag","Object","defineProperty","value","actionBars","initBarFunctions","barsInitialised","barsSettings","barsDisallowedFields","BatchActions","initBars","initFunction","bars","Array","from","MatrixInput","fieldHandle","target","closest","initBarFunction","Neo","Input","getName","Commerce","VariantMatrix","VariantMatrixInit","prototype","init","VariantMatrixAddVariant","addVariant","variantMatrix","apply","arguments","trigger"],"sourceRoot":""}